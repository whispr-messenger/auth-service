name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: '18'

jobs:
  # ================================
  # Quick validation for PRs
  # ================================
  pr-validation:
    name: PR Quick Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npx prettier --check "src/**/*.ts" "test/**/*.ts"

      - name: Run linting
        run: npm run lint

      - name: Type checking
        run: npx tsc --noEmit

      - name: Run unit tests
        run: npm run test

      - name: Build check
        run: npm run build

      - name: Docker build test (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: auth-service:pr-${{ github.event.number }}

  # ================================
  # Security Analysis for PRs
  # ================================
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: pr-validation
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Audit npm dependencies
        run: |
          echo "üîç Auditing npm dependencies (high severity)..."
          npm audit --audit-level=high --json > audit.json || true
          if [ -s audit.json ]; then
            HIGH=$(jq '.metadata.vulnerabilities.high' audit.json || echo 0)
            CRITICAL=$(jq '.metadata.vulnerabilities.critical' audit.json || echo 0)
            TOTAL=$(jq '.metadata.vulnerabilities.total' audit.json || echo 0)
            echo "Summary of vulnerabilities:"
            echo "  High: $HIGH"
            echo "  Critical: $CRITICAL"
            echo "  Total: $TOTAL"
            if [ "$CRITICAL" -gt 0 ]; then
              echo "‚ùå Critical vulnerabilities detected!"
              exit 1
            elif [ "$HIGH" -gt 5 ]; then
              echo "‚ö†Ô∏è High vulnerability count exceeds threshold (5)"
              exit 1
            else
              echo "‚úÖ Security audit passed"
            fi
          else
            echo "‚úÖ No vulnerabilities found"
          fi

      - name: Check for known security issues
        run: |
          echo "üîç Checking for common security patterns..."
          
          # V√©rifier les secrets hardcod√©s
          if grep -r "password[[:space:]]*=[[:space:]]*['\"]" src/ --include="*.ts" --include="*.js"; then
            echo "‚ö†Ô∏è Potential hardcoded passwords found"
            exit 1
          fi
          
          # V√©rifier les cl√©s API hardcod√©es
          if grep -r "api[_-]?key[[:space:]]*=[[:space:]]*['\"]" src/ --include="*.ts" --include="*.js"; then
            echo "‚ö†Ô∏è Potential hardcoded API keys found"
            exit 1
          fi
          
          echo "‚úÖ Basic security checks passed"

      - name: Run Trivy on Docker image
        run: |
          echo "üîç Scanning Docker image for vulnerabilities..."
          docker build -t auth-service:pr-security .
          
          # Scan with Trivy
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$HOME/.cache:/root/.cache" \
            aquasec/trivy:latest image \
            --format table \
            --exit-code 1 \
            --severity CRITICAL,HIGH \
            auth-service:pr-security

  # ================================
  # SBOM Generation and Analysis for PRs
  # ================================
  sbom-analysis:
    name: SBOM Analysis
    runs-on: ubuntu-latest
    needs: [pr-validation, security-analysis]
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install analysis tools
        run: |
          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          # Install grype for vulnerability analysis
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Build Docker image for SBOM
        run: docker build -t auth-service:pr-sbom .

      - name: Generate SBOM
        run: |
          echo "üì¶ Generating SBOM for PR analysis..."
          syft auth-service:pr-sbom -o spdx-json > sbom-pr.json
          
          # Show SBOM summary
          echo "üìä SBOM Summary:"
          PACKAGE_COUNT=$(jq '.packages | length' sbom-pr.json)
          echo "  üì¶ Total packages: $PACKAGE_COUNT"

      - name: Vulnerability analysis with SBOM
        run: |
          echo "üîç Analyzing SBOM for vulnerabilities..."
          
          # Run grype analysis
          grype sbom:sbom-pr.json -o json > vulnerabilities-pr.json
          grype sbom:sbom-pr.json -o table
          
          # Extract statistics
          if command -v jq >/dev/null 2>&1; then
            CRITICAL=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' vulnerabilities-pr.json)
            HIGH=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' vulnerabilities-pr.json)
            MEDIUM=$(jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length' vulnerabilities-pr.json)
            LOW=$(jq '[.matches[] | select(.vulnerability.severity == "Low")] | length' vulnerabilities-pr.json)
            
            echo "üìä Vulnerability Summary:"
            echo "  üî¥ Critical: $CRITICAL"
            echo "  üü† High: $HIGH"
            echo "  üü° Medium: $MEDIUM"
            echo "  üü¢ Low: $LOW"
            
            # Security gate for PR
            if [ "$CRITICAL" -gt 0 ]; then
              echo "‚ùå SECURITY GATE FAILED: $CRITICAL critical vulnerabilities found"
              exit 1
            fi
            
            if [ "$HIGH" -gt 10 ]; then
              echo "‚ö†Ô∏è SECURITY GATE WARNING: $HIGH high vulnerabilities (max: 10 for PR)"
              # Don't fail on HIGH for PR, just warn
            fi
            
            echo "‚úÖ Security gates passed for PR"
          fi

      - name: Upload SBOM and vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: sbom-analysis-pr-${{ github.event.number }}
          path: |
            sbom-pr.json
            vulnerabilities-pr.json

  # ================================
  # SonarQube analysis for PRs (skipped in CE)
  # ================================
  sonarqube-pr:
    name: SonarQube PR Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: pr-validation
    if: github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:cov

      # Note: SonarQube Community Edition only supports main branch analysis
      # SonarQube analysis will run when PR is merged to main

  # ================================
  # Summary comment
  # ================================
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    needs: [pr-validation, security-analysis, sbom-analysis]
    if: always()
    
    steps:
      - name: Comment PR
        if: github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v7
        with:
          script: |
            const validationStatus = '${{ needs.pr-validation.result }}';
            const securityStatus = '${{ needs.security-analysis.result }}';
            const sbomStatus = '${{ needs.sbom-analysis.result }}';
            
            let summary = `## üîç PR Validation Summary #${{ github.event.number }}\n\n`;
            
            summary += `### ‚úÖ Basic Validation\n`;
            summary += `- **Status**: ${validationStatus === 'success' ? '‚úÖ Success' : '‚ùå Failed'}\n`;
            summary += `- Format, lint, unit tests, build, Docker build\n\n`;
            
            summary += `### üîí Security Analysis\n`;
            summary += `- **Status**: ${securityStatus === 'success' ? '‚úÖ Success' : (securityStatus === 'failure' ? '‚ùå Failed' : '‚è≠Ô∏è Skipped')}\n`;
            summary += `- Trivy filesystem scan, npm audit, security patterns\n\n`;
            
            summary += `### ÔøΩ SBOM & Vulnerability Analysis\n`;
            summary += `- **Status**: ${sbomStatus === 'success' ? '‚úÖ Success' : (sbomStatus === 'failure' ? '‚ùå Failed' : '‚è≠Ô∏è Skipped')}\n`;
            summary += `- SBOM generation, vulnerability scanning with Grype\n\n`;
            
            summary += `### ÔøΩüìä SonarQube Analysis\n`;
            summary += `- **Status**: ‚è≠Ô∏è Skipped (Community Edition - Main branch only)\n`;
            summary += `- Quality analysis will run when PR is merged to main\n\n`;
            
            const allSuccess = validationStatus === 'success' && securityStatus === 'success' && sbomStatus === 'success';
            const anyFailed = validationStatus === 'failure' || securityStatus === 'failure' || sbomStatus === 'failure';
            
            if (allSuccess) {
              summary += `### üéâ This PR is ready to merge!\n`;
              summary += `All security and quality checks passed. The full CI/CD pipeline with deployment will run on merge to main.\n`;
            } else if (anyFailed) {
              summary += `### ‚ö†Ô∏è This PR requires fixes before merge\n`;
              summary += `Please review the failed checks and fix the issues.\n`;
            } else {
              summary += `### ‚è≥ Some checks are still running...\n`;
              summary += `Please wait for all checks to complete.\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Log summary for fork PRs
        if: github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "üìã PR Validation Summary for fork PR #${{ github.event.number }}"
          echo "‚úÖ Basic validation: ${{ needs.pr-validation.result }}"
          echo "ÔøΩ Security analysis: ${{ needs.security-analysis.result }}"
          echo "üì¶ SBOM analysis: ${{ needs.sbom-analysis.result }}"
          echo "ÔøΩüìä SonarQube: Skipped (Community Edition - Main branch only)"
          echo ""
          echo "Note: Cannot comment on fork PRs due to security restrictions."
          echo "Check the workflow logs for detailed validation results."