name: Pipeline Monitor

on:
  workflow_run:
    workflows: ["Main CI Pipeline", "Tests & Quality", "Security Analysis", "Docker Build & Deploy"]
    types: [completed]

jobs:
  monitor:
    name: Pipeline Status Monitor
    runs-on: ubuntu-latest
    
    steps:
      - name: Check workflow status
        run: |
          echo "🔍 Monitoring workflow: ${{ github.event.workflow_run.name }}"
          echo "📋 Status: ${{ github.event.workflow_run.conclusion }}"
          echo "🔗 Run ID: ${{ github.event.workflow_run.id }}"
          echo "🌟 Commit: ${{ github.event.workflow_run.head_commit.message }}"

      - name: Pipeline failure notification
        if: github.event.workflow_run.conclusion == 'failure'
        run: |
          echo "🚨 PIPELINE FAILURE DETECTED!"
          echo "Workflow: ${{ github.event.workflow_run.name }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "URL: ${{ github.event.workflow_run.html_url }}"

      - name: Create failure issue
        if: github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.head_branch == 'main'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Pipeline Failure: ${context.payload.workflow_run.name}`;
            const body = `
            ## Pipeline Failure Report
            
            **Workflow**: ${context.payload.workflow_run.name}
            **Branch**: ${context.payload.workflow_run.head_branch}
            **Commit**: ${context.payload.workflow_run.head_sha}
            **Run URL**: ${context.payload.workflow_run.html_url}
            **Failure Time**: ${new Date().toISOString()}
            
            ### Commit Details
            - **Message**: ${context.payload.workflow_run.head_commit.message}
            - **Author**: ${context.payload.workflow_run.head_commit.author.name}
            
            ### Next Steps
            1. Check the workflow logs for detailed error information
            2. Fix the issues and push a new commit
            3. This issue will be automatically closed when the pipeline passes
            
            ---
            *This issue was automatically created by the Pipeline Monitor*
            `;
            
            // Vérifier si une issue similaire existe déjà
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'pipeline-failure'
            });
            
            const similarIssue = existingIssues.data.find(issue => 
              issue.title.includes(context.payload.workflow_run.name)
            );
            
            if (!similarIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['pipeline-failure', 'bug', 'ci/cd']
              });
            }

      - name: Close success issues
        if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
        uses: actions/github-script@v7
        with:
          script: |
            // Fermer les issues de pipeline failure pour ce workflow
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'pipeline-failure'
            });
            
            for (const issue of issues.data) {
              if (issue.title.includes(context.payload.workflow_run.name)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `✅ Pipeline is now working! Closing this issue.\n\n**Fixed in commit**: ${context.payload.workflow_run.head_sha}`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              }
            }